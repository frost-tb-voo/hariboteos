diff -u ./26_day/harib23f/bootpack.c ./26_day/harib23g/bootpack.c
--- ./26_day/harib23f/bootpack.c	2005-11-26 00:54:22.000000000 +0900
+++ ./26_day/harib23g/bootpack.c	2005-11-30 01:14:56.000000000 +0900
@@ -8,6 +8,8 @@
 void keywin_off(struct SHEET *key_win);
 void keywin_on(struct SHEET *key_win);
 struct SHEET *open_console(struct SHTCTL *shtctl, unsigned int memtotal);
+void close_console(struct SHEET *sht);
+void close_constask(struct TASK *task);
 
 void HariMain(void)
 {
@@ -51,6 +53,7 @@
 	init_pic();
 	io_sti(); /* IDT/PICの初期化が終わったのでCPUの割り込み禁止を解除 */
 	fifo32_init(&fifo, 128, fifobuf, 0);
+	*((int *) 0x0fec) = (int) &fifo;
 	init_pit();
 	init_keyboard(&fifo, 256);
 	enable_mouse(&fifo, 512, &mdec);
@@ -123,9 +126,13 @@
 		} else {
 			i = fifo32_get(&fifo);
 			io_sti();
-			if (key_win->flags == 0) {	/* ウィンドウが閉じられた */
-				key_win = shtctl->sheets[shtctl->top - 1];
-				keywin_on(key_win);
+			if (key_win != 0 && key_win->flags == 0) {	/* ウィンドウが閉じられた */
+				if (shtctl->top == 1) {	/* もうマウスと背景しかない */
+					key_win = 0;
+				} else {
+					key_win = shtctl->sheets[shtctl->top - 1];
+					keywin_on(key_win);
+				}
 			}
 			if (256 <= i && i <= 511) { /* キーボードデータ */
 				if (i < 0x80 + 256) { /* キーコードを文字コードに変換 */
@@ -143,10 +150,10 @@
 						s[0] += 0x20;	/* 大文字を小文字に変換 */
 					}
 				}
-				if (s[0] != 0) { /* 通常文字、バックスペース、Enter */
+				if (s[0] != 0 && key_win != 0) { /* 通常文字、バックスペース、Enter */
 					fifo32_put(&key_win->task->fifo, s[0] + 256);
 				}
-				if (i == 256 + 0x0f) {	/* Tab */
+				if (i == 256 + 0x0f && key_win != 0) {	/* Tab */
 					keywin_off(key_win);
 					j = key_win->height - 1;
 					if (j == 0) {
@@ -182,7 +189,7 @@
 					fifo32_put(&keycmd, KEYCMD_LED);
 					fifo32_put(&keycmd, key_leds);
 				}
-				if (i == 256 + 0x3b && key_shift != 0) {	/* Shift+F1 */
+				if (i == 256 + 0x3b && key_shift != 0 && key_win != 0) {	/* Shift+F1 */
 					task = key_win->task;
 					if (task != 0 && task->tss.ss0 != 0) {
 						cons_putstr0(task->cons, "\nBreak(key) :\n");
@@ -194,7 +201,9 @@
 				}
 				if (i == 256 + 0x3c && key_shift != 0) {	/* Shift+F2 */
 					/* 新しく作ったコンソールを入力選択状態にする（そのほうが親切だよね？） */
-					keywin_off(key_win);
+					if (key_win != 0) {
+						keywin_off(key_win);
+					}
 					key_win = open_console(shtctl, memtotal);
 					sheet_slide(key_win, 32, 4);
 					sheet_updown(key_win, shtctl->top);
@@ -284,6 +293,8 @@
 						}
 					}
 				}
+			} else if (768 <= i && i <= 1023) {	/* コンソール終了処理 */
+				close_console(shtctl->sheets0 + (i - 768));
 			}
 		}
 	}
@@ -317,7 +328,8 @@
 	sheet_setbuf(sht, buf, 256, 165, -1); /* 透明色なし */
 	make_window8(buf, 256, 165, "console", 0);
 	make_textbox8(sht, 8, 28, 240, 128, COL8_000000);
-	task->tss.esp = memman_alloc_4k(memman, 64 * 1024) + 64 * 1024 - 12;
+	task->cons_stack = memman_alloc_4k(memman, 64 * 1024);
+	task->tss.esp = task->cons_stack + 64 * 1024 - 12;
 	task->tss.eip = (int) &console_task;
 	task->tss.es = 1 * 8;
 	task->tss.cs = 2 * 8;
@@ -333,3 +345,23 @@
 	fifo32_init(&task->fifo, 128, cons_fifo, task);
 	return sht;
 }
+
+void close_constask(struct TASK *task)
+{
+	struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
+	task_sleep(task);
+	memman_free_4k(memman, task->cons_stack, 64 * 1024);
+	memman_free_4k(memman, (int) task->fifo.buf, 128 * 4);
+	task->flags = 0; /* task_free(task); の代わり */
+	return;
+}
+
+void close_console(struct SHEET *sht)
+{
+	struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
+	struct TASK *task = sht->task;
+	memman_free_4k(memman, (int) sht->buf, 256 * 165);
+	sheet_free(sht);
+	close_constask(task);
+	return;
+}
diff -u ./26_day/harib23f/bootpack.h ./26_day/harib23g/bootpack.h
--- ./26_day/harib23f/bootpack.h	2006-03-31 01:08:34.000000000 +0900
+++ ./26_day/harib23g/bootpack.h	2006-04-01 00:51:32.000000000 +0900
@@ -211,7 +211,7 @@
 	struct FIFO32 fifo;
 	struct TSS32 tss;
 	struct CONSOLE *cons;
-	int ds_base;
+	int ds_base, cons_stack;
 };
 struct TASKLEVEL {
 	int running; /* 動作しているタスクの数 */
@@ -255,6 +255,7 @@
 void cmd_cls(struct CONSOLE *cons);
 void cmd_dir(struct CONSOLE *cons);
 void cmd_type(struct CONSOLE *cons, int *fat, char *cmdline);
+void cmd_exit(struct CONSOLE *cons, int *fat);
 int cmd_app(struct CONSOLE *cons, int *fat, char *cmdline);
 int *hrb_api(int edi, int esi, int ebp, int esp, int ebx, int edx, int ecx, int eax);
 int *inthandler0d(int *esp);
diff -u ./26_day/harib23f/console.c ./26_day/harib23g/console.c
--- ./26_day/harib23f/console.c	2006-03-31 23:17:48.000000000 +0900
+++ ./26_day/harib23g/console.c	2006-04-01 01:00:50.000000000 +0900
@@ -173,6 +173,8 @@
 		cmd_dir(cons);
 	} else if (strncmp(cmdline, "type ", 5) == 0) {
 		cmd_type(cons, fat, cmdline);
+	} else if (strcmp(cmdline, "exit") == 0) {
+		cmd_exit(cons, fat);
 	} else if (cmdline[0] != 0) {
 		if (cmd_app(cons, fat, cmdline) == 0) {
 			/* コマンドではなく、アプリでもなく、さらに空行でもない */
@@ -250,6 +252,22 @@
 	return;
 }
 
+void cmd_exit(struct CONSOLE *cons, int *fat)
+{
+	struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
+	struct TASK *task = task_now();
+	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *) 0x0fe4);
+	struct FIFO32 *fifo = (struct FIFO32 *) *((int *) 0x0fec);
+	timer_cancel(cons->timer);
+	memman_free_4k(memman, (int) fat, 4 * 2880);
+	io_cli();
+	fifo32_put(fifo, cons->sht - shtctl->sheets0 + 768);	/* 768〜1023 */
+	io_sti();
+	for (;;) {
+		task_sleep(task);
+	}
+}
+
 int cmd_app(struct CONSOLE *cons, int *fat, char *cmdline)
 {
 	struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
