diff -u ./26_day/harib23d/bootpack.c ./26_day/harib23e/bootpack.c
--- ./26_day/harib23d/bootpack.c	2005-11-25 22:21:06.000000000 +0900
+++ ./26_day/harib23e/bootpack.c	2005-11-25 22:49:28.000000000 +0900
@@ -7,6 +7,7 @@
 
 void keywin_off(struct SHEET *key_win);
 void keywin_on(struct SHEET *key_win);
+struct SHEET *open_console(struct SHTCTL *shtctl, unsigned int memtotal);
 
 void HariMain(void)
 {
@@ -14,14 +15,14 @@
 	struct SHTCTL *shtctl;
 	char s[40];
 	struct FIFO32 fifo, keycmd;
-	int fifobuf[128], keycmd_buf[32], *cons_fifo[2];
+	int fifobuf[128], keycmd_buf[32];
 	int mx, my, i, new_mx = -1, new_my = 0, new_wx = 0x7fffffff, new_wy = 0;
 	unsigned int memtotal;
 	struct MOUSE_DEC mdec;
 	struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
-	unsigned char *buf_back, buf_mouse[256], *buf_cons[2];
+	unsigned char *buf_back, buf_mouse[256];
 	struct SHEET *sht_back, *sht_mouse, *sht_cons[2];
-	struct TASK *task_a, *task_cons[2], *task;
+	struct TASK *task_a, *task;
 	static char keytable0[0x80] = {
 		0,   0,   '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '^', 0x08, 0,
 		'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '@', '[', 0x0a, 0, 'A', 'S',
@@ -76,29 +77,8 @@
 	init_screen8(buf_back, binfo->scrnx, binfo->scrny);
 
 	/* sht_cons */
-	for (i = 0; i < 2; i++) {
-		sht_cons[i] = sheet_alloc(shtctl);
-		buf_cons[i] = (unsigned char *) memman_alloc_4k(memman, 256 * 165);
-		sheet_setbuf(sht_cons[i], buf_cons[i], 256, 165, -1); /* 透明色なし */
-		make_window8(buf_cons[i], 256, 165, "console", 0);
-		make_textbox8(sht_cons[i], 8, 28, 240, 128, COL8_000000);
-		task_cons[i] = task_alloc();
-		task_cons[i]->tss.esp = memman_alloc_4k(memman, 64 * 1024) + 64 * 1024 - 12;
-		task_cons[i]->tss.eip = (int) &console_task;
-		task_cons[i]->tss.es = 1 * 8;
-		task_cons[i]->tss.cs = 2 * 8;
-		task_cons[i]->tss.ss = 1 * 8;
-		task_cons[i]->tss.ds = 1 * 8;
-		task_cons[i]->tss.fs = 1 * 8;
-		task_cons[i]->tss.gs = 1 * 8;
-		*((int *) (task_cons[i]->tss.esp + 4)) = (int) sht_cons[i];
-		*((int *) (task_cons[i]->tss.esp + 8)) = memtotal;
-		task_run(task_cons[i], 2, 2); /* level=2, priority=2 */
-		sht_cons[i]->task = task_cons[i];
-		sht_cons[i]->flags |= 0x20;	/* カーソルあり */
-		cons_fifo[i] = (int *) memman_alloc_4k(memman, 128 * 4);
-		fifo32_init(&task_cons[i]->fifo, 128, cons_fifo[i], task_cons[i]);
-	}
+	sht_cons[0] = open_console(shtctl, memtotal);
+	sht_cons[1] = 0; /* まだ開いてない */
 
 	/* sht_mouse */
 	sht_mouse = sheet_alloc(shtctl);
@@ -108,13 +88,11 @@
 	my = (binfo->scrny - 28 - 16) / 2;
 
 	sheet_slide(sht_back,  0,  0);
-	sheet_slide(sht_cons[1], 56,  6);
-	sheet_slide(sht_cons[0],  8,  2);
+	sheet_slide(sht_cons[0], 32, 4);
 	sheet_slide(sht_mouse, mx, my);
 	sheet_updown(sht_back,     0);
-	sheet_updown(sht_cons[1],  1);
-	sheet_updown(sht_cons[0],  2);
-	sheet_updown(sht_mouse,    3);
+	sheet_updown(sht_cons[0],  1);
+	sheet_updown(sht_mouse,    2);
 	key_win = sht_cons[0];
 	keywin_on(key_win);
 
@@ -206,9 +184,9 @@
 					fifo32_put(&keycmd, KEYCMD_LED);
 					fifo32_put(&keycmd, key_leds);
 				}
-				if (i == 256 + 0x3b && key_shift != 0) {
+				if (i == 256 + 0x3b && key_shift != 0) {	/* Shift+F1 */
 					task = key_win->task;
-					if (task != 0 && task->tss.ss0 != 0) {	/* Shift+F1 */
+					if (task != 0 && task->tss.ss0 != 0) {
 						cons_putstr0(task->cons, "\nBreak(key) :\n");
 						io_cli();	/* 強制終了処理中にタスクが変わると困るから */
 						task->tss.eax = (int) &(task->tss.esp0);
@@ -216,6 +194,15 @@
 						io_sti();
 					}
 				}
+				if (i == 256 + 0x3c && key_shift != 0 && sht_cons[1] == 0) {	/* Shift+F2 */
+					sht_cons[1] = open_console(shtctl, memtotal);
+					sheet_slide(sht_cons[1], 32, 4);
+					sheet_updown(sht_cons[1], shtctl->top);
+					/* 新しく作ったコンソールを入力選択状態にする（そのほうが親切だよね？） */
+					keywin_off(key_win);
+					key_win = sht_cons[1];
+					keywin_on(key_win);
+				}
 				if (i == 256 + 0x57) {	/* F11 */
 					sheet_updown(shtctl->sheets[1], shtctl->top - 1);
 				}
@@ -323,3 +310,29 @@
 	return;
 }
 
+struct SHEET *open_console(struct SHTCTL *shtctl, unsigned int memtotal)
+{
+	struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
+	struct SHEET *sht = sheet_alloc(shtctl);
+	unsigned char *buf = (unsigned char *) memman_alloc_4k(memman, 256 * 165);
+	struct TASK *task = task_alloc();
+	int *cons_fifo = (int *) memman_alloc_4k(memman, 128 * 4);
+	sheet_setbuf(sht, buf, 256, 165, -1); /* 透明色なし */
+	make_window8(buf, 256, 165, "console", 0);
+	make_textbox8(sht, 8, 28, 240, 128, COL8_000000);
+	task->tss.esp = memman_alloc_4k(memman, 64 * 1024) + 64 * 1024 - 12;
+	task->tss.eip = (int) &console_task;
+	task->tss.es = 1 * 8;
+	task->tss.cs = 2 * 8;
+	task->tss.ss = 1 * 8;
+	task->tss.ds = 1 * 8;
+	task->tss.fs = 1 * 8;
+	task->tss.gs = 1 * 8;
+	*((int *) (task->tss.esp + 4)) = (int) sht;
+	*((int *) (task->tss.esp + 8)) = memtotal;
+	task_run(task, 2, 2); /* level=2, priority=2 */
+	sht->task = task;
+	sht->flags |= 0x20;	/* カーソルあり */
+	fifo32_init(&task->fifo, 128, cons_fifo, task);
+	return sht;
+}
