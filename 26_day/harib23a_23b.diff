diff -u ./26_day/harib23a/bootpack.c ./26_day/harib23b/bootpack.c
--- ./26_day/harib23a/bootpack.c	2005-11-20 20:08:18.000000000 +0900
+++ ./26_day/harib23b/bootpack.c	2005-11-23 18:16:44.000000000 +0900
@@ -43,7 +43,7 @@
 		0,   0,   0,   '_', 0,   0,   0,   0,   0,   0,   0,   0,   0,   '|', 0,   0
 	};
 	int key_shift = 0, key_leds = (binfo->leds >> 4) & 7, keycmd_wait = -1;
-	int j, x, y, mmx = -1, mmy = -1;
+	int j, x, y, mmx = -1, mmy = -1, mmx2 = 0;
 	struct SHEET *sht = 0, *key_win;
 
 	init_gdtidt();
@@ -253,6 +253,7 @@
 										if (3 <= x && x < sht->bxsize - 3 && 3 <= y && y < 21) {
 											mmx = mx;	/* ウィンドウ移動モードへ */
 											mmy = my;
+											mmx2 = sht->vx0;
 										}
 										if (sht->bxsize - 21 <= x && x < sht->bxsize - 5 && 5 <= y && y < 19) {
 											/* 「×」ボタンクリック */
@@ -273,9 +274,8 @@
 							/* ウィンドウ移動モードの場合 */
 							x = mx - mmx;	/* マウスの移動量を計算 */
 							y = my - mmy;
-							sheet_slide(sht, sht->vx0 + x, sht->vy0 + y);
-							mmx = mx;	/* 移動後の座標に更新 */
-							mmy = my;
+							sheet_slide(sht, (mmx2 + x + 2) & ~3, sht->vy0 + y);
+							mmy = my;	/* 移動後の座標に更新 */
 						}
 					} else {
 						/* 左ボタンを押していない */
diff -u ./26_day/harib23a/console.c ./26_day/harib23b/console.c
--- ./26_day/harib23a/console.c	2006-03-31 19:53:20.000000000 +0900
+++ ./26_day/harib23b/console.c	2006-03-31 23:17:48.000000000 +0900
@@ -347,7 +347,7 @@
 		sht->flags |= 0x10;
 		sheet_setbuf(sht, (char *) ebx + ds_base, esi, edi, eax);
 		make_window8((char *) ebx + ds_base, esi, edi, (char *) ecx + ds_base, 0);
-		sheet_slide(sht, (shtctl->xsize - esi) / 2, (shtctl->ysize - edi) / 2);
+		sheet_slide(sht, ((shtctl->xsize - esi) / 2) & ~3, (shtctl->ysize - edi) / 2);
 		sheet_updown(sht, shtctl->top); /* 今のマウスと同じ高さになるように指定： マウスはこの上になる */
 		reg[7] = (int) sht;
 	} else if (edx == 6) {
diff -u ./26_day/harib23a/sheet.c ./26_day/harib23b/sheet.c
--- ./26_day/harib23a/sheet.c	2005-11-23 14:38:24.000000000 +0900
+++ ./26_day/harib23b/sheet.c	2005-11-23 19:56:40.000000000 +0900
@@ -56,7 +56,7 @@
 
 void sheet_refreshmap(struct SHTCTL *ctl, int vx0, int vy0, int vx1, int vy1, int h0)
 {
-	int h, bx, by, vx, vy, bx0, by0, bx1, by1;
+	int h, bx, by, vx, vy, bx0, by0, bx1, by1, sid4, *p;
 	unsigned char *buf, sid, *map = ctl->map;
 	struct SHEET *sht;
 	if (vx0 < 0) { vx0 = 0; }
@@ -76,12 +76,26 @@
 		if (bx1 > sht->bxsize) { bx1 = sht->bxsize; }
 		if (by1 > sht->bysize) { by1 = sht->bysize; }
 		if (sht->col_inv == -1) {
-			/* 透明色なし専用の高速版 */
-			for (by = by0; by < by1; by++) {
-				vy = sht->vy0 + by;
-				for (bx = bx0; bx < bx1; bx++) {
-					vx = sht->vx0 + bx;
-					map[vy * ctl->xsize + vx] = sid;
+			if ((sht->vx0 & 3) == 0 && (bx0 & 3) == 0 && (bx1 & 3) == 0) {
+				/* 透明色なし専用の高速版（4バイト型） */
+				bx1 = (bx1 - bx0) / 4; /* MOV回数 */
+				sid4 = sid | sid << 8 | sid << 16 | sid << 24;
+				for (by = by0; by < by1; by++) {
+					vy = sht->vy0 + by;
+					vx = sht->vx0 + bx0;
+					p = (int *) &map[vy * ctl->xsize + vx];
+					for (bx = 0; bx < bx1; bx++) {
+						p[bx] = sid4;
+					}
+				}
+			} else {
+				/* 透明色なし専用の高速版（1バイト型） */
+				for (by = by0; by < by1; by++) {
+					vy = sht->vy0 + by;
+					for (bx = bx0; bx < bx1; bx++) {
+						vx = sht->vx0 + bx;
+						map[vy * ctl->xsize + vx] = sid;
+					}
 				}
 			}
 		} else {
