diff -u ./26_day/harib23i/bootpack.c ./26_day/harib23j/bootpack.c
--- ./26_day/harib23i/bootpack.c	2005-11-30 20:06:56.000000000 +0900
+++ ./26_day/harib23j/bootpack.c	2005-12-01 18:11:06.000000000 +0900
@@ -299,6 +299,8 @@
 				}
 			} else if (768 <= i && i <= 1023) {	/* コンソール終了処理 */
 				close_console(shtctl->sheets0 + (i - 768));
+			} else if (1024 <= i && i <= 2023) {
+				close_constask(taskctl->tasks0 + (i - 1024));
 			}
 		}
 	}
@@ -322,16 +324,11 @@
 	return;
 }
 
-struct SHEET *open_console(struct SHTCTL *shtctl, unsigned int memtotal)
+struct TASK *open_constask(struct SHEET *sht, unsigned int memtotal)
 {
 	struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
-	struct SHEET *sht = sheet_alloc(shtctl);
-	unsigned char *buf = (unsigned char *) memman_alloc_4k(memman, 256 * 165);
 	struct TASK *task = task_alloc();
 	int *cons_fifo = (int *) memman_alloc_4k(memman, 128 * 4);
-	sheet_setbuf(sht, buf, 256, 165, -1); /* 透明色なし */
-	make_window8(buf, 256, 165, "console", 0);
-	make_textbox8(sht, 8, 28, 240, 128, COL8_000000);
 	task->cons_stack = memman_alloc_4k(memman, 64 * 1024);
 	task->tss.esp = task->cons_stack + 64 * 1024 - 12;
 	task->tss.eip = (int) &console_task;
@@ -344,9 +341,20 @@
 	*((int *) (task->tss.esp + 4)) = (int) sht;
 	*((int *) (task->tss.esp + 8)) = memtotal;
 	task_run(task, 2, 2); /* level=2, priority=2 */
-	sht->task = task;
-	sht->flags |= 0x20;	/* カーソルあり */
 	fifo32_init(&task->fifo, 128, cons_fifo, task);
+	return task;
+}
+
+struct SHEET *open_console(struct SHTCTL *shtctl, unsigned int memtotal)
+{
+	struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
+	struct SHEET *sht = sheet_alloc(shtctl);
+	unsigned char *buf = (unsigned char *) memman_alloc_4k(memman, 256 * 165);
+	sheet_setbuf(sht, buf, 256, 165, -1); /* 透明色なし */
+	make_window8(buf, 256, 165, "console", 0);
+	make_textbox8(sht, 8, 28, 240, 128, COL8_000000);
+	sht->task = open_constask(sht, memtotal);
+	sht->flags |= 0x20;	/* カーソルあり */
 	return sht;
 }
 
diff -u ./26_day/harib23i/bootpack.h ./26_day/harib23j/bootpack.h
--- ./26_day/harib23i/bootpack.h	2006-04-01 20:12:18.000000000 +0900
+++ ./26_day/harib23j/bootpack.h	2006-04-02 01:37:34.000000000 +0900
@@ -224,6 +224,7 @@
 	struct TASKLEVEL level[MAX_TASKLEVELS];
 	struct TASK tasks0[MAX_TASKS];
 };
+extern struct TASKCTL *taskctl;
 extern struct TIMER *task_timer;
 struct TASK *task_now(void);
 struct TASK *task_init(struct MEMMAN *memman);
@@ -257,6 +258,7 @@
 void cmd_type(struct CONSOLE *cons, int *fat, char *cmdline);
 void cmd_exit(struct CONSOLE *cons, int *fat);
 void cmd_start(struct CONSOLE *cons, char *cmdline, int memtotal);
+void cmd_ncst(struct CONSOLE *cons, char *cmdline, int memtotal);
 int cmd_app(struct CONSOLE *cons, int *fat, char *cmdline);
 int *hrb_api(int edi, int esi, int ebp, int esp, int ebx, int edx, int ecx, int eax);
 int *inthandler0d(int *esp);
@@ -275,4 +277,5 @@
 struct FILEINFO *file_search(char *name, struct FILEINFO *finfo, int max);
 
 /* bootpack.c */
+struct TASK *open_constask(struct SHEET *sht, unsigned int memtotal);
 struct SHEET *open_console(struct SHTCTL *shtctl, unsigned int memtotal);
diff -u ./26_day/harib23i/console.c ./26_day/harib23j/console.c
--- ./26_day/harib23i/console.c	2006-04-01 23:39:16.000000000 +0900
+++ ./26_day/harib23j/console.c	2006-04-02 01:38:42.000000000 +0900
@@ -17,9 +17,11 @@
 	cons.cur_c = -1;
 	task->cons = &cons;
 
-	cons.timer = timer_alloc();
-	timer_init(cons.timer, &task->fifo, 1);
-	timer_settime(cons.timer, 50);
+	if (sheet != 0) {
+		cons.timer = timer_alloc();
+		timer_init(cons.timer, &task->fifo, 1);
+		timer_settime(cons.timer, 50);
+	}
 	file_readfat(fat, (unsigned char *) (ADR_DISKIMG + 0x000200));
 
 	/* プロンプト表示 */
@@ -51,7 +53,10 @@
 				cons.cur_c = COL8_FFFFFF;
 			}
 			if (i == 3) {	/* カーソルOFF */
-				boxfill8(sheet->buf, sheet->bxsize, COL8_000000, cons.cur_x, cons.cur_y, cons.cur_x + 7, cons.cur_y + 15);
+				if (sheet != 0) {
+					boxfill8(sheet->buf, sheet->bxsize, COL8_000000,
+						cons.cur_x, cons.cur_y, cons.cur_x + 7, cons.cur_y + 15);
+				}
 				cons.cur_c = -1;
 			}
 			if (i == 4) {	/* コンソールの「×」ボタンクリック */
@@ -72,6 +77,9 @@
 					cmdline[cons.cur_x / 8 - 2] = 0;
 					cons_newline(&cons);
 					cons_runcmd(cmdline, &cons, fat, memtotal);	/* コマンド実行 */
+					if (sheet == 0) {
+						cmd_exit(&cons, fat);
+					}
 					/* プロンプト表示 */
 					cons_putchar(&cons, '>', 1);
 				} else {
@@ -84,10 +92,13 @@
 				}
 			}
 			/* カーソル再表示 */
-			if (cons.cur_c >= 0) {
-				boxfill8(sheet->buf, sheet->bxsize, cons.cur_c, cons.cur_x, cons.cur_y, cons.cur_x + 7, cons.cur_y + 15);
+			if (sheet != 0) {
+				if (cons.cur_c >= 0) {
+					boxfill8(sheet->buf, sheet->bxsize, cons.cur_c, 
+						cons.cur_x, cons.cur_y, cons.cur_x + 7, cons.cur_y + 15);
+				}
+				sheet_refresh(sheet, cons.cur_x, cons.cur_y, cons.cur_x + 8, cons.cur_y + 16);
 			}
-			sheet_refresh(sheet, cons.cur_x, cons.cur_y, cons.cur_x + 8, cons.cur_y + 16);
 		}
 	}
 }
@@ -99,7 +110,9 @@
 	s[1] = 0;
 	if (s[0] == 0x09) {	/* タブ */
 		for (;;) {
-			putfonts8_asc_sht(cons->sht, cons->cur_x, cons->cur_y, COL8_FFFFFF, COL8_000000, " ", 1);
+			if (cons->sht != 0) {
+				putfonts8_asc_sht(cons->sht, cons->cur_x, cons->cur_y, COL8_FFFFFF, COL8_000000, " ", 1);
+			}
 			cons->cur_x += 8;
 			if (cons->cur_x == 8 + 240) {
 				cons_newline(cons);
@@ -113,7 +126,9 @@
 	} else if (s[0] == 0x0d) {	/* 復帰 */
 		/* とりあえずなにもしない */
 	} else {	/* 普通の文字 */
-		putfonts8_asc_sht(cons->sht, cons->cur_x, cons->cur_y, COL8_FFFFFF, COL8_000000, s, 1);
+		if (cons->sht != 0) {
+			putfonts8_asc_sht(cons->sht, cons->cur_x, cons->cur_y, COL8_FFFFFF, COL8_000000, s, 1);
+		}
 		if (move != 0) {
 			/* moveが0のときはカーソルを進めない */
 			cons->cur_x += 8;
@@ -133,17 +148,19 @@
 		cons->cur_y += 16; /* 次の行へ */
 	} else {
 		/* スクロール */
-		for (y = 28; y < 28 + 112; y++) {
-			for (x = 8; x < 8 + 240; x++) {
-				sheet->buf[x + y * sheet->bxsize] = sheet->buf[x + (y + 16) * sheet->bxsize];
+		if (sheet != 0) {
+			for (y = 28; y < 28 + 112; y++) {
+				for (x = 8; x < 8 + 240; x++) {
+					sheet->buf[x + y * sheet->bxsize] = sheet->buf[x + (y + 16) * sheet->bxsize];
+				}
 			}
-		}
-		for (y = 28 + 112; y < 28 + 128; y++) {
-			for (x = 8; x < 8 + 240; x++) {
-				sheet->buf[x + y * sheet->bxsize] = COL8_000000;
+			for (y = 28 + 112; y < 28 + 128; y++) {
+				for (x = 8; x < 8 + 240; x++) {
+					sheet->buf[x + y * sheet->bxsize] = COL8_000000;
+				}
 			}
+			sheet_refresh(sheet, 8, 28, 8 + 240, 28 + 128);
 		}
-		sheet_refresh(sheet, 8, 28, 8 + 240, 28 + 128);
 	}
 	cons->cur_x = 8;
 	return;
@@ -168,18 +185,20 @@
 
 void cons_runcmd(char *cmdline, struct CONSOLE *cons, int *fat, int memtotal)
 {
-	if (strcmp(cmdline, "mem") == 0) {
+	if (strcmp(cmdline, "mem") == 0 && cons->sht != 0) {
 		cmd_mem(cons, memtotal);
-	} else if (strcmp(cmdline, "cls") == 0) {
+	} else if (strcmp(cmdline, "cls") == 0 && cons->sht != 0) {
 		cmd_cls(cons);
-	} else if (strcmp(cmdline, "dir") == 0) {
+	} else if (strcmp(cmdline, "dir") == 0 && cons->sht != 0) {
 		cmd_dir(cons);
-	} else if (strncmp(cmdline, "type ", 5) == 0) {
+	} else if (strncmp(cmdline, "type ", 5) == 0 && cons->sht != 0) {
 		cmd_type(cons, fat, cmdline);
 	} else if (strcmp(cmdline, "exit") == 0) {
 		cmd_exit(cons, fat);
 	} else if (strncmp(cmdline, "start ", 6) == 0) {
 		cmd_start(cons, cmdline, memtotal);
+	} else if (strncmp(cmdline, "ncst ", 5) == 0) {
+		cmd_ncst(cons, cmdline, memtotal);
 	} else if (cmdline[0] != 0) {
 		if (cmd_app(cons, fat, cmdline) == 0) {
 			/* コマンドではなく、アプリでもなく、さらに空行でもない */
@@ -263,10 +282,16 @@
 	struct TASK *task = task_now();
 	struct SHTCTL *shtctl = (struct SHTCTL *) *((int *) 0x0fe4);
 	struct FIFO32 *fifo = (struct FIFO32 *) *((int *) 0x0fec);
-	timer_cancel(cons->timer);
+	if (cons->sht != 0) {
+		timer_cancel(cons->timer);
+	}
 	memman_free_4k(memman, (int) fat, 4 * 2880);
 	io_cli();
-	fifo32_put(fifo, cons->sht - shtctl->sheets0 + 768);	/* 768〜1023 */
+	if (cons->sht != 0) {
+		fifo32_put(fifo, cons->sht - shtctl->sheets0 + 768);	/* 768〜1023 */
+	} else {
+		fifo32_put(fifo, task - taskctl->tasks0 + 1024);	/* 1024〜2023 */
+	}
 	io_sti();
 	for (;;) {
 		task_sleep(task);
@@ -286,6 +311,20 @@
 		fifo32_put(fifo, cmdline[i] + 256);
 	}
 	fifo32_put(fifo, 10 + 256);	/* Enter */
+	cons_newline(cons);
+	return;
+}
+
+void cmd_ncst(struct CONSOLE *cons, char *cmdline, int memtotal)
+{
+	struct TASK *task = open_constask(0, memtotal);
+	struct FIFO32 *fifo = &task->fifo;
+	int i;
+	/* コマンドラインに入力された文字列を、一文字ずつ新しいコンソールに入力 */
+	for (i = 5; cmdline[i] != 0; i++) {
+		fifo32_put(fifo, cmdline[i] + 256);
+	}
+	fifo32_put(fifo, 10 + 256);	/* Enter */
 	cons_newline(cons);
 	return;
 }
