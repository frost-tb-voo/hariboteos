diff -u harib10c/bootpack.c harib10g/bootpack.c
--- harib10c/bootpack.c	2006-03-23 00:52:56.000000000 +0900
+++ harib10g/bootpack.c	2006-03-23 07:59:34.000000000 +0900
@@ -9,8 +9,9 @@
 void HariMain(void)
 {
 	struct BOOTINFO *binfo = (struct BOOTINFO *) ADR_BOOTINFO;
-	struct FIFO8 timerfifo;
-	char s[40], keybuf[32], mousebuf[128], timerbuf[8];
+	struct FIFO32 fifo;
+	char s[40];
+	int fifobuf[128];
 	struct TIMER *timer, *timer2, *timer3;
 	int mx, my, i, count = 0;
 	unsigned int memtotal;
@@ -23,25 +24,23 @@
 	init_gdtidt();
 	init_pic();
 	io_sti(); /* IDT/PICの初期化が終わったのでCPUの割り込み禁止を解除 */
-	fifo8_init(&keyfifo, 32, keybuf);
-	fifo8_init(&mousefifo, 128, mousebuf);
+	fifo32_init(&fifo, 128, fifobuf);
 	init_pit();
+	init_keyboard(&fifo, 256);
+	enable_mouse(&fifo, 512, &mdec);
 	io_out8(PIC0_IMR, 0xf8); /* PITとPIC1とキーボードを許可(11111000) */
 	io_out8(PIC1_IMR, 0xef); /* マウスを許可(11101111) */
 
-	fifo8_init(&timerfifo, 8, timerbuf);
 	timer = timer_alloc();
-	timer_init(timer, &timerfifo, 10);
+	timer_init(timer, &fifo, 10);
 	timer_settime(timer, 1000);
 	timer2 = timer_alloc();
-	timer_init(timer2, &timerfifo, 3);
+	timer_init(timer2, &fifo, 3);
 	timer_settime(timer2, 300);
 	timer3 = timer_alloc();
-	timer_init(timer3, &timerfifo, 1);
+	timer_init(timer3, &fifo, 1);
 	timer_settime(timer3, 50);
 
-	init_keyboard();
-	enable_mouse(&mdec);
 	memtotal = memtest(0x00400000, 0xbfffffff);
 	memman_init(memman);
 	memman_free(memman, 0x00001000, 0x0009e000); /* 0x00001000 - 0x0009efff */
@@ -78,18 +77,16 @@
 		count++;
 
 		io_cli();
-		if (fifo8_status(&keyfifo) + fifo8_status(&mousefifo) + fifo8_status(&timerfifo) == 0) {
+		if (fifo32_status(&fifo) == 0) {
 			io_sti();
 		} else {
-			if (fifo8_status(&keyfifo) != 0) {
-				i = fifo8_get(&keyfifo);
-				io_sti();
-				sprintf(s, "%02X", i);
+			i = fifo32_get(&fifo);
+			io_sti();
+			if (256 <= i && i <= 511) { /* キーボードデータ */
+				sprintf(s, "%02X", i - 256);
 				putfonts8_asc_sht(sht_back, 0, 16, COL8_FFFFFF, COL8_008484, s, 2);
-			} else if (fifo8_status(&mousefifo) != 0) {
-				i = fifo8_get(&mousefifo);
-				io_sti();
-				if (mouse_decode(&mdec, i) != 0) {
+			} else if (512 <= i && i <= 767) { /* マウスデータ */
+				if (mouse_decode(&mdec, i - 512) != 0) {
 					/* データが3バイト揃ったので表示 */
 					sprintf(s, "[lcr %4d %4d]", mdec.x, mdec.y);
 					if ((mdec.btn & 0x01) != 0) {
@@ -121,28 +118,23 @@
 					putfonts8_asc_sht(sht_back, 0, 0, COL8_FFFFFF, COL8_008484, s, 10);
 					sheet_slide(sht_mouse, mx, my);
 				}
-			} else if (fifo8_status(&timerfifo) != 0) {
-				i = fifo8_get(&timerfifo); /* タイムアウトしたのはどれかな？ */
-				io_sti();
-				if (i == 10) {
-					putfonts8_asc_sht(sht_back, 0, 64, COL8_FFFFFF, COL8_008484, "10[sec]", 7);
-					sprintf(s, "%010d", count);
-					putfonts8_asc_sht(sht_win, 40, 28, COL8_000000, COL8_C6C6C6, s, 10);
-				} else if (i == 3) {
-					putfonts8_asc_sht(sht_back, 0, 80, COL8_FFFFFF, COL8_008484, "3[sec]", 6);
-					count = 0; /* 測定開始 */
-				} else {
-					/* 0か1 */
-					if (i != 0) {
-						timer_init(timer3, &timerfifo, 0); /* 次は0を */
-						boxfill8(buf_back, binfo->scrnx, COL8_FFFFFF, 8, 96, 15, 111);
-					} else {
-						timer_init(timer3, &timerfifo, 1); /* 次は1を */
-						boxfill8(buf_back, binfo->scrnx, COL8_008484, 8, 96, 15, 111);
-					}
-					timer_settime(timer3, 50);
-					sheet_refresh(sht_back, 8, 96, 16, 112);
-				}
+			} else if (i == 10) { /* 10秒タイマ */
+				putfonts8_asc_sht(sht_back, 0, 64, COL8_FFFFFF, COL8_008484, "10[sec]", 7);
+				sprintf(s, "%010d", count);
+				putfonts8_asc_sht(sht_win, 40, 28, COL8_000000, COL8_C6C6C6, s, 10);
+			} else if (i == 3) { /* 3秒タイマ */
+				putfonts8_asc_sht(sht_back, 0, 80, COL8_FFFFFF, COL8_008484, "3[sec]", 6);
+				count = 0; /* 測定開始 */
+			} else if (i == 1) { /* カーソル用タイマ */
+				timer_init(timer3, &fifo, 0); /* 次は0を */
+				boxfill8(buf_back, binfo->scrnx, COL8_FFFFFF, 8, 96, 15, 111);
+				timer_settime(timer3, 50);
+				sheet_refresh(sht_back, 8, 96, 16, 112);
+			} else if (i == 0) { /* カーソル用タイマ */
+				timer_init(timer3, &fifo, 1); /* 次は1を */
+				boxfill8(buf_back, binfo->scrnx, COL8_008484, 8, 96, 15, 111);
+				timer_settime(timer3, 50);
+				sheet_refresh(sht_back, 8, 96, 16, 112);
 			}
 		}
 	}
diff -u harib10c/bootpack.h harib10g/bootpack.h
--- harib10c/bootpack.h	2006-10-15 18:07:38.000000000 +0900
+++ harib10g/bootpack.h	2006-10-15 19:02:54.000000000 +0900
@@ -29,14 +29,14 @@
 unsigned int memtest_sub(unsigned int start, unsigned int end);
 
 /* fifo.c */
-struct FIFO8 {
-	unsigned char *buf;
+struct FIFO32 {
+	int *buf;
 	int p, q, size, free, flags;
 };
-void fifo8_init(struct FIFO8 *fifo, int size, unsigned char *buf);
-int fifo8_put(struct FIFO8 *fifo, unsigned char data);
-int fifo8_get(struct FIFO8 *fifo);
-int fifo8_status(struct FIFO8 *fifo);
+void fifo32_init(struct FIFO32 *fifo, int size, int *buf);
+int fifo32_put(struct FIFO32 *fifo, int data);
+int fifo32_get(struct FIFO32 *fifo);
+int fifo32_status(struct FIFO32 *fifo);
 
 /* graphic.c */
 void init_palette(void);
@@ -108,8 +108,7 @@
 /* keyboard.c */
 void inthandler21(int *esp);
 void wait_KBC_sendready(void);
-void init_keyboard(void);
-extern struct FIFO8 keyfifo;
+void init_keyboard(struct FIFO32 *fifo, int data0);
 #define PORT_KEYDAT		0x0060
 #define PORT_KEYCMD		0x0064
 
@@ -119,9 +118,8 @@
 	int x, y, btn;
 };
 void inthandler2c(int *esp);
-void enable_mouse(struct MOUSE_DEC *mdec);
+void enable_mouse(struct FIFO32 *fifo, int data0, struct MOUSE_DEC *mdec);
 int mouse_decode(struct MOUSE_DEC *mdec, unsigned char dat);
-extern struct FIFO8 mousefifo;
 
 /* memory.c */
 #define MEMMAN_FREES		4090	/* これで約32KB */
@@ -166,8 +164,8 @@
 #define MAX_TIMER		500
 struct TIMER {
 	unsigned int timeout, flags;
-	struct FIFO8 *fifo;
-	unsigned char data;
+	struct FIFO32 *fifo;
+	int data;
 };
 struct TIMERCTL {
 	unsigned int count, next, using;
@@ -178,6 +176,6 @@
 void init_pit(void);
 struct TIMER *timer_alloc(void);
 void timer_free(struct TIMER *timer);
-void timer_init(struct TIMER *timer, struct FIFO8 *fifo, unsigned char data);
+void timer_init(struct TIMER *timer, struct FIFO32 *fifo, int data);
 void timer_settime(struct TIMER *timer, unsigned int timeout);
 void inthandler20(int *esp);
diff -u harib10c/fifo.c harib10g/fifo.c
--- harib10c/fifo.c	2005-03-28 21:54:34.000000000 +0900
+++ harib10g/fifo.c	2005-05-30 03:39:18.000000000 +0900
@@ -4,7 +4,7 @@
 
 #define FLAGS_OVERRUN		0x0001
 
-void fifo8_init(struct FIFO8 *fifo, int size, unsigned char *buf)
+void fifo32_init(struct FIFO32 *fifo, int size, int *buf)
 /* FIFOバッファの初期化 */
 {
 	fifo->size = size;
@@ -16,7 +16,7 @@
 	return;
 }
 
-int fifo8_put(struct FIFO8 *fifo, unsigned char data)
+int fifo32_put(struct FIFO32 *fifo, int data)
 /* FIFOへデータを送り込んで蓄える */
 {
 	if (fifo->free == 0) {
@@ -33,7 +33,7 @@
 	return 0;
 }
 
-int fifo8_get(struct FIFO8 *fifo)
+int fifo32_get(struct FIFO32 *fifo)
 /* FIFOからデータを一つとってくる */
 {
 	int data;
@@ -50,7 +50,7 @@
 	return data;
 }
 
-int fifo8_status(struct FIFO8 *fifo)
+int fifo32_status(struct FIFO32 *fifo)
 /* どのくらいデータが溜まっているかを報告する */
 {
 	return fifo->size - fifo->free;
diff -u harib10c/keyboard.c harib10g/keyboard.c
--- harib10c/keyboard.c	2005-04-18 09:51:48.000000000 +0900
+++ harib10g/keyboard.c	2005-05-30 03:54:34.000000000 +0900
@@ -2,14 +2,15 @@
 
 #include "bootpack.h"
 
-struct FIFO8 keyfifo;
+struct FIFO32 *keyfifo;
+int keydata0;
 
 void inthandler21(int *esp)
 {
-	unsigned char data;
+	int data;
 	io_out8(PIC0_OCW2, 0x61);	/* IRQ-01受付完了をPICに通知 */
 	data = io_in8(PORT_KEYDAT);
-	fifo8_put(&keyfifo, data);
+	fifo32_put(keyfifo, data + keydata0);
 	return;
 }
 
@@ -29,8 +30,11 @@
 	return;
 }
 
-void init_keyboard(void)
+void init_keyboard(struct FIFO32 *fifo, int data0)
 {
+	/* 書き込み先のFIFOバッファを記憶 */
+	keyfifo = fifo;
+	keydata0 = data0;
 	/* キーボードコントローラの初期化 */
 	wait_KBC_sendready();
 	io_out8(PORT_KEYCMD, KEYCMD_WRITE_MODE);
diff -u harib10c/mouse.c harib10g/mouse.c
--- harib10c/mouse.c	2005-04-18 09:46:04.000000000 +0900
+++ harib10g/mouse.c	2005-05-30 03:54:54.000000000 +0900
@@ -2,24 +2,28 @@
 
 #include "bootpack.h"
 
-struct FIFO8 mousefifo;
+struct FIFO32 *mousefifo;
+int mousedata0;
 
 void inthandler2c(int *esp)
 /* PS/2マウスからの割り込み */
 {
-	unsigned char data;
+	int data;
 	io_out8(PIC1_OCW2, 0x64);	/* IRQ-12受付完了をPIC1に通知 */
 	io_out8(PIC0_OCW2, 0x62);	/* IRQ-02受付完了をPIC0に通知 */
 	data = io_in8(PORT_KEYDAT);
-	fifo8_put(&mousefifo, data);
+	fifo32_put(mousefifo, data + mousedata0);
 	return;
 }
 
 #define KEYCMD_SENDTO_MOUSE		0xd4
 #define MOUSECMD_ENABLE			0xf4
 
-void enable_mouse(struct MOUSE_DEC *mdec)
+void enable_mouse(struct FIFO32 *fifo, int data0, struct MOUSE_DEC *mdec)
 {
+	/* 書き込み先のFIFOバッファを記憶 */
+	mousefifo = fifo;
+	mousedata0 = data0;
 	/* マウス有効 */
 	wait_KBC_sendready();
 	io_out8(PORT_KEYCMD, KEYCMD_SENDTO_MOUSE);
diff -u harib10c/timer.c harib10g/timer.c
--- harib10c/timer.c	2006-05-12 17:46:56.000000000 +0900
+++ harib10g/timer.c	2006-05-12 18:13:58.000000000 +0900
@@ -43,7 +43,7 @@
 	return;
 }
 
-void timer_init(struct TIMER *timer, struct FIFO8 *fifo, unsigned char data)
+void timer_init(struct TIMER *timer, struct FIFO32 *fifo, int data)
 {
 	timer->fifo = fifo;
 	timer->data = data;
@@ -90,7 +90,7 @@
 		}
 		/* タイムアウト */
 		timerctl.timers[i]->flags = TIMER_FLAGS_ALLOC;
-		fifo8_put(timerctl.timers[i]->fifo, timerctl.timers[i]->data);
+		fifo32_put(timerctl.timers[i]->fifo, timerctl.timers[i]->data);
 	}
 	/* ちょうどi個のタイマがタイムアウトした。残りをずらす。 */
 	timerctl.using -= i;
