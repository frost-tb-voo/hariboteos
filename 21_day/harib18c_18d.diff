diff -u ./21_day/harib18c/bootpack.h ./21_day/harib18d/bootpack.h
--- ./21_day/harib18c/bootpack.h	2006-11-07 22:11:00.000000000 +0900
+++ ./21_day/harib18d/bootpack.h	2007-05-23 21:55:18.000000000 +0900
@@ -32,6 +32,7 @@
 void farjmp(int eip, int cs);
 void farcall(int eip, int cs);
 void asm_hrb_api(void);
+void start_app(int eip, int cs, int esp, int ds);
 
 /* fifo.c */
 struct FIFO32 {
diff -u ./21_day/harib18c/console.c ./21_day/harib18d/console.c
--- ./21_day/harib18c/console.c	2007-05-23 20:05:36.000000000 +0900
+++ ./21_day/harib18d/console.c	2007-05-23 21:52:50.000000000 +0900
@@ -257,7 +257,7 @@
 	struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
 	struct FILEINFO *finfo;
 	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *) ADR_GDT;
-	char name[18], *p;
+	char name[18], *p, *q;
 	int i;
 
 	/* コマンドラインからファイル名を生成 */
@@ -284,9 +284,11 @@
 	if (finfo != 0) {
 		/* ファイルが見つかった場合 */
 		p = (char *) memman_alloc_4k(memman, finfo->size);
+		q = (char *) memman_alloc_4k(memman, 64 * 1024);
 		*((int *) 0xfe8) = (int) p;
 		file_loadfile(finfo->clustno, finfo->size, p, fat, (char *) (ADR_DISKIMG + 0x003e00));
 		set_segmdesc(gdt + 1003, finfo->size - 1, (int) p, AR_CODE32_ER);
+		set_segmdesc(gdt + 1004, 64 * 1024 - 1,   (int) q, AR_DATA32_RW);
 		if (finfo->size >= 8 && strncmp(p + 4, "Hari", 4) == 0) {
 			p[0] = 0xe8;
 			p[1] = 0x16;
@@ -295,8 +297,9 @@
 			p[4] = 0x00;
 			p[5] = 0xcb;
 		}
-		farcall(0, 1003 * 8);
+		start_app(0, 1003 * 8, 64 * 1024, 1004 * 8);
 		memman_free_4k(memman, (int) p, finfo->size);
+		memman_free_4k(memman, (int) q, 64 * 1024);
 		cons_newline(cons);
 		return 1;
 	}
バイナリーファイル ./21_day/harib18c/haribote.img と./21_day/harib18d/haribote.img は異なります
diff -u ./21_day/harib18c/naskfunc.nas ./21_day/harib18d/naskfunc.nas
--- ./21_day/harib18c/naskfunc.nas	2006-11-07 21:55:28.000000000 +0900
+++ ./21_day/harib18d/naskfunc.nas	2007-05-23 22:01:00.000000000 +0900
@@ -17,7 +17,7 @@
 		GLOBAL	_asm_inthandler27, _asm_inthandler2c
 		GLOBAL	_memtest_sub
 		GLOBAL	_farjmp, _farcall
-		GLOBAL	_asm_hrb_api
+		GLOBAL	_asm_hrb_api, _start_app
 		EXTERN	_inthandler20, _inthandler21
 		EXTERN	_inthandler27, _inthandler2c
 		EXTERN	_hrb_api
@@ -116,13 +116,38 @@
 		PUSH	ES
 		PUSH	DS
 		PUSHAD
+		MOV		AX,SS
+		CMP		AX,1*8
+		JNE		.from_app
+;	OSが動いているときに割り込まれたのでほぼ今までどおり
 		MOV		EAX,ESP
-		PUSH	EAX
+		PUSH	SS				; 割り込まれたときのSSを保存
+		PUSH	EAX				; 割り込まれたときのESPを保存
 		MOV		AX,SS
 		MOV		DS,AX
 		MOV		ES,AX
 		CALL	_inthandler20
+		ADD		ESP,8
+		POPAD
+		POP		DS
+		POP		ES
+		IRETD
+.from_app:
+;	アプリが動いているときに割り込まれた
+		MOV		EAX,1*8
+		MOV		DS,AX			; とりあえずDSだけOS用にする
+		MOV		ECX,[0xfe4]		; OSのESP
+		ADD		ECX,-8
+		MOV		[ECX+4],SS		; 割り込まれたときのSSを保存
+		MOV		[ECX  ],ESP		; 割り込まれたときのESPを保存
+		MOV		SS,AX
+		MOV		ES,AX
+		MOV		ESP,ECX
+		CALL	_inthandler20
+		POP		ECX
 		POP		EAX
+		MOV		SS,AX			; SSをアプリ用に戻す
+		MOV		ESP,ECX			; ESPもアプリ用に戻す
 		POPAD
 		POP		DS
 		POP		ES
@@ -132,13 +157,38 @@
 		PUSH	ES
 		PUSH	DS
 		PUSHAD
+		MOV		AX,SS
+		CMP		AX,1*8
+		JNE		.from_app
+;	OSが動いているときに割り込まれたのでほぼ今までどおり
 		MOV		EAX,ESP
-		PUSH	EAX
+		PUSH	SS				; 割り込まれたときのSSを保存
+		PUSH	EAX				; 割り込まれたときのESPを保存
 		MOV		AX,SS
 		MOV		DS,AX
 		MOV		ES,AX
 		CALL	_inthandler21
+		ADD		ESP,8
+		POPAD
+		POP		DS
+		POP		ES
+		IRETD
+.from_app:
+;	アプリが動いているときに割り込まれた
+		MOV		EAX,1*8
+		MOV		DS,AX			; とりあえずDSだけOS用にする
+		MOV		ECX,[0xfe4]		; OSのESP
+		ADD		ECX,-8
+		MOV		[ECX+4],SS		; 割り込まれたときのSSを保存
+		MOV		[ECX  ],ESP		; 割り込まれたときのESPを保存
+		MOV		SS,AX
+		MOV		ES,AX
+		MOV		ESP,ECX
+		CALL	_inthandler21
+		POP		ECX
 		POP		EAX
+		MOV		SS,AX			; SSをアプリ用に戻す
+		MOV		ESP,ECX			; ESPもアプリ用に戻す
 		POPAD
 		POP		DS
 		POP		ES
@@ -148,13 +198,38 @@
 		PUSH	ES
 		PUSH	DS
 		PUSHAD
+		MOV		AX,SS
+		CMP		AX,1*8
+		JNE		.from_app
+;	OSが動いているときに割り込まれたのでほぼ今までどおり
 		MOV		EAX,ESP
-		PUSH	EAX
+		PUSH	SS				; 割り込まれたときのSSを保存
+		PUSH	EAX				; 割り込まれたときのESPを保存
 		MOV		AX,SS
 		MOV		DS,AX
 		MOV		ES,AX
 		CALL	_inthandler27
+		ADD		ESP,8
+		POPAD
+		POP		DS
+		POP		ES
+		IRETD
+.from_app:
+;	アプリが動いているときに割り込まれた
+		MOV		EAX,1*8
+		MOV		DS,AX			; とりあえずDSだけOS用にする
+		MOV		ECX,[0xfe4]		; OSのESP
+		ADD		ECX,-8
+		MOV		[ECX+4],SS		; 割り込まれたときのSSを保存
+		MOV		[ECX  ],ESP		; 割り込まれたときのESPを保存
+		MOV		SS,AX
+		MOV		ES,AX
+		MOV		ESP,ECX
+		CALL	_inthandler27
+		POP		ECX
 		POP		EAX
+		MOV		SS,AX			; SSをアプリ用に戻す
+		MOV		ESP,ECX			; ESPもアプリ用に戻す
 		POPAD
 		POP		DS
 		POP		ES
@@ -164,13 +239,38 @@
 		PUSH	ES
 		PUSH	DS
 		PUSHAD
+		MOV		AX,SS
+		CMP		AX,1*8
+		JNE		.from_app
+;	OSが動いているときに割り込まれたのでほぼ今までどおり
 		MOV		EAX,ESP
-		PUSH	EAX
+		PUSH	SS				; 割り込まれたときのSSを保存
+		PUSH	EAX				; 割り込まれたときのESPを保存
 		MOV		AX,SS
 		MOV		DS,AX
 		MOV		ES,AX
 		CALL	_inthandler2c
+		ADD		ESP,8
+		POPAD
+		POP		DS
+		POP		ES
+		IRETD
+.from_app:
+;	アプリが動いているときに割り込まれた
+		MOV		EAX,1*8
+		MOV		DS,AX			; とりあえずDSだけOS用にする
+		MOV		ECX,[0xfe4]		; OSのESP
+		ADD		ECX,-8
+		MOV		[ECX+4],SS		; 割り込まれたときのSSを保存
+		MOV		[ECX  ],ESP		; 割り込まれたときのESPを保存
+		MOV		SS,AX
+		MOV		ES,AX
+		MOV		ESP,ECX
+		CALL	_inthandler2c
+		POP		ECX
 		POP		EAX
+		MOV		SS,AX			; SSをアプリ用に戻す
+		MOV		ESP,ECX			; ESPもアプリ用に戻す
 		POPAD
 		POP		DS
 		POP		ES
@@ -218,11 +318,81 @@
 		RET
 
 _asm_hrb_api:
-		STI
-		PUSHAD	; 保存のためのPUSH
-		PUSHAD	; hrb_apiに渡すためのPUSH
+		; 都合のいいことに最初から割り込み禁止になっている
+		PUSH	DS
+		PUSH	ES
+		PUSHAD		; 保存のためのPUSH
+		MOV		EAX,1*8
+		MOV		DS,AX			; とりあえずDSだけOS用にする
+		MOV		ECX,[0xfe4]		; OSのESP
+		ADD		ECX,-40
+		MOV		[ECX+32],ESP	; アプリのESPを保存
+		MOV		[ECX+36],SS		; アプリのSSを保存
+
+; PUSHADした値をシステムのスタックにコピーする
+		MOV		EDX,[ESP   ]
+		MOV		EBX,[ESP+ 4]
+		MOV		[ECX   ],EDX	; hrb_apiに渡すためコピー
+		MOV		[ECX+ 4],EBX	; hrb_apiに渡すためコピー
+		MOV		EDX,[ESP+ 8]
+		MOV		EBX,[ESP+12]
+		MOV		[ECX+ 8],EDX	; hrb_apiに渡すためコピー
+		MOV		[ECX+12],EBX	; hrb_apiに渡すためコピー
+		MOV		EDX,[ESP+16]
+		MOV		EBX,[ESP+20]
+		MOV		[ECX+16],EDX	; hrb_apiに渡すためコピー
+		MOV		[ECX+20],EBX	; hrb_apiに渡すためコピー
+		MOV		EDX,[ESP+24]
+		MOV		EBX,[ESP+28]
+		MOV		[ECX+24],EDX	; hrb_apiに渡すためコピー
+		MOV		[ECX+28],EBX	; hrb_apiに渡すためコピー
+
+		MOV		ES,AX			; 残りのセグメントレジスタもOS用にする
+		MOV		SS,AX
+		MOV		ESP,ECX
+		STI			; やっと割り込み許可
+
 		CALL	_hrb_api
-		ADD		ESP,32
+
+		MOV		ECX,[ESP+32]	; アプリのESPを思い出す
+		MOV		EAX,[ESP+36]	; アプリのSSを思い出す
+		CLI
+		MOV		SS,AX
+		MOV		ESP,ECX
 		POPAD
-		IRETD
+		POP		ES
+		POP		DS
+		IRETD		; この命令が自動でSTIしてくれる
 
+_start_app:		; void start_app(int eip, int cs, int esp, int ds);
+		PUSHAD		; 32ビットレジスタを全部保存しておく
+		MOV		EAX,[ESP+36]	; アプリ用のEIP
+		MOV		ECX,[ESP+40]	; アプリ用のCS
+		MOV		EDX,[ESP+44]	; アプリ用のESP
+		MOV		EBX,[ESP+48]	; アプリ用のDS/SS
+		MOV		[0xfe4],ESP		; OS用のESP
+		CLI			; 切り替え中に割り込みが起きてほしくないので禁止
+		MOV		ES,BX
+		MOV		SS,BX
+		MOV		DS,BX
+		MOV		FS,BX
+		MOV		GS,BX
+		MOV		ESP,EDX
+		STI			; 切り替え完了なので割り込み可能に戻す
+		PUSH	ECX				; far-CALLのためにPUSH（cs）
+		PUSH	EAX				; far-CALLのためにPUSH（eip）
+		CALL	FAR [ESP]		; アプリを呼び出す
+
+;	アプリが終了するとここに帰ってくる
+
+		MOV		EAX,1*8			; OS用のDS/SS
+		CLI			; また切り替えるので割り込み禁止
+		MOV		ES,AX
+		MOV		SS,AX
+		MOV		DS,AX
+		MOV		FS,AX
+		MOV		GS,AX
+		MOV		ESP,[0xfe4]
+		STI			; 切り替え完了なので割り込み可能に戻す
+		POPAD	; 保存しておいたレジスタを回復
+		RET
